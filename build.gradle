plugins {
    id 'java-library'
    id 'io.qameta.allure' version '2.10.0'
}

repositories {
    mavenCentral()
}

def allureVersion = "2.19.0",
    selenideVersion = "6.12.3",
    junitVersion = "5.9.0"


allure {
    report {
        version.set(allureVersion)
    }
    adapter {
        aspectjWeaver.set(true)
        frameworks {
            junit5 {
                adapterVersion.set(allureVersion)
            }
        }
    }
}



dependencies {
    implementation 'org.jetbrains:annotations:20.1.0'
    testImplementation(
            "com.codeborne:selenide:$selenideVersion",
            "io.qameta.allure:allure-selenide:$allureVersion",
//            "io.rest-assured:rest-assured:4.3.1",
//            "io.qameta.allure:allure-rest-assured:$allureVersion",
            "com.github.javafaker:javafaker:1.0.2",
            "org.junit.jupiter:junit-jupiter:$junitVersion",
            "org.junit.jupiter:junit-jupiter-api:$junitVersion",
            "org.assertj:assertj-core:3.19.0",
            "org.aspectj:aspectjweaver:1.9.19",
            "org.aeonbits.owner:owner:1.0.12")
    testRuntimeOnly(
            "org.junit.jupiter:junit-jupiter-engine:$junitVersion",
            "org.slf4j:slf4j-simple:2.0.7")
}

/*tasks.withType(Test) {
    useJUnitPlatform()
    systemProperties(System.getProperties())
    testLogging {
        if (System.getProperty("threads") != null) {
            systemProperties += [
                    'junit.jupiter.execution.parallel.enabled'                 : true,
                    'junit.jupiter.execution.parallel.mode.default'            : 'concurrent',
                    'junit.jupiter.execution.parallel.mode.classes.default'    : 'concurrent',
                    'junit.jupiter.execution.parallel.config.strategy'         : 'fixed',
                    'junit.jupiter.execution.parallel.config.fixed.parallelism': System.getProperty("threads").toInteger()
            ]
            lifecycle {
//                events "started", "skipped", "failed", "standard_error", "standard_out"
                exceptionFormat "short"
            }
        }
    }
}*/

tasks.withType(Test) {
    useJUnitPlatform()
    systemProperties(System.getProperties())
    testLogging {
        lifecycle {
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }
}

task normal(type: Test) {
    useJUnitPlatform {
        includeTags("normal")
    }
}

task critical(type: Test) {
    useJUnitPlatform {
        includeTags("critical")
    }
}




