plugins {
    id 'java-library'
    id 'io.qameta.allure' version '2.10.0'
}

repositories {
    mavenCentral()
}

def allureVersion = "2.19.0",
    selenideVersion = "6.12.3",
    junitVersion = "5.9.0",
    slf4jVersion = '2.0.3',
    aspectjVersion = "1.9.19",
    ownerVersion = "1.0.12",
    assertjVersion = "3.23.1",
    restAssuredVersion = "5.2.0"




allure {
    report {
        version.set(allureVersion)
    }
    adapter {
        aspectjWeaver.set(true)
        frameworks {
            junit5 {
                adapterVersion.set(allureVersion)
            }
        }
    }
}



dependencies {
    implementation 'org.jetbrains:annotations:20.1.0'
    testImplementation(
            "org.aspectj:aspectjweaver:$aspectjVersion",
            "com.codeborne:selenide:$selenideVersion",
            "org.junit.jupiter:junit-jupiter:$junitVersion",
            "org.slf4j:slf4j-simple:$slf4jVersion",
            "io.qameta.allure:allure-selenide:$allureVersion",
            "org.aeonbits.owner:owner:$ownerVersion",
            "org.assertj:assertj-core:$assertjVersion",
            "io.rest-assured:rest-assured:$restAssuredVersion",
            'com.github.javafaker:javafaker:1.0.2'
    )
}


tasks.withType(Test) {
    useJUnitPlatform()
    systemProperties(System.getProperties())
    testLogging {
        lifecycle {
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }
}

task any(type: Test) {
    useJUnitPlatform {
        includeTags("any")
    }
}task normal(type: Test) {
    useJUnitPlatform {
        includeTags("normal")
    }
}

task critical(type: Test) {
    useJUnitPlatform {
        includeTags("normal")
    }
}

task local(type: Test) {
    useJUnitPlatform {
        includeTags("local")
    }
}

task remote(type: Test) {
    useJUnitPlatform {
        includeTags("remote")
    }
}


tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}




